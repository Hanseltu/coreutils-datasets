n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data-stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin-stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout-stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version5  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg006  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg009  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr110  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr211  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr312  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr413  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr514  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( ( NOT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
)) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat2[0x0000000B] @ (A-data-stat2[0x0000000A] @ (A-data-stat2[0x00000009] @ A-data-stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat2[0x0000003F] @ (A-data-stat2[0x0000003E] @ (A-data-stat2[0x0000003D] @ (A-data-stat2[0x0000003C] @ (A-data-stat2[0x0000003B] @ (A-data-stat2[0x0000003A] @ (A-data-stat2[0x00000039] @ A-data-stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin-stat3[0x0000000B] @ (stdin-stat3[0x0000000A] @ (stdin-stat3[0x00000009] @ stdin-stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin-stat3[0x0000003F] @ (stdin-stat3[0x0000003E] @ (stdin-stat3[0x0000003D] @ (stdin-stat3[0x0000003C] @ (stdin-stat3[0x0000003B] @ (stdin-stat3[0x0000003A] @ (stdin-stat3[0x00000039] @ stdin-stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout-stat4[0x0000000B] @ (stdout-stat4[0x0000000A] @ (stdout-stat4[0x00000009] @ stdout-stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout-stat4[0x0000003F] @ (stdout-stat4[0x0000003E] @ (stdout-stat4[0x0000003D] @ (stdout-stat4[0x0000003C] @ (stdout-stat4[0x0000003B] @ (stdout-stat4[0x0000003A] @ (stdout-stat4[0x00000039] @ stdout-stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version5[0x00000000]
) AND (0x00 = model_version5[0x00000001]
)
) AND (0x00 = model_version5[0x00000002]
)
) AND (0x00 = model_version5[0x00000003]
)
) );
ASSERT( (0x2D = arg006[0x00000000]
) );
ASSERT( (0x2D = arg006[0x00000001]
) );
ASSERT( (0x3D = arg006[0x00000003]
) );
ASSERT( (0x66 = arg006[0x00000002]
) );
ASSERT( ( NOT( (0x00 = arg006[0x00000004]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000007]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000008]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000009]
))) );
ASSERT( (LET let_k_0 = arg006[0x00000004] IN 
((0x78 = let_k_0
) OR ((0x75 = let_k_0
) OR ((0x6F = let_k_0
) OR (0x64 = let_k_0
)
)
)
))  );
ASSERT( ( NOT( (0x43 = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x49 = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x4C = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x53 = arg006[0x00000005]
))) );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
)
 );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
)
 );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
,64)
)
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
,64)
)
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
,64)
)
 IN 
BVGT(BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
,64)
)
,0x0000000000000008)
)  );
ASSERT( (LET let_k_0 = arg006[0x00000004] IN 
((0x64 = let_k_0
) OR ((0x6F = let_k_0
) OR ((0x78 = let_k_0
) OR (0x75 = let_k_0
)
)
)
))  );
ASSERT( (LET let_k_0 = arg006[0x00000005] IN 
((0x37 = let_k_0
) OR ((0x36 = let_k_0
) OR ((0x35 = let_k_0
) OR ((0x34 = let_k_0
) OR ((0x33 = let_k_0
) OR ((0x32 = let_k_0
) OR ((0x31 = let_k_0
) OR ((0x30 = let_k_0
) OR ((0x39 = let_k_0
) OR (0x38 = let_k_0
)
)
)
)
)
)
)
)
)
))  );
ASSERT( (LET let_k_0 = arg006[0x00000006] IN 
((0x37 = let_k_0
) OR ((0x36 = let_k_0
) OR ((0x35 = let_k_0
) OR ((0x34 = let_k_0
) OR ((0x33 = let_k_0
) OR ((0x32 = let_k_0
) OR ((0x31 = let_k_0
) OR ((0x30 = let_k_0
) OR ((0x39 = let_k_0
) OR (0x38 = let_k_0
)
)
)
)
)
)
)
)
)
))  );
ASSERT( (LET let_k_0 = arg006[0x00000007] IN 
((0x37 = let_k_0
) OR ((0x36 = let_k_0
) OR ((0x35 = let_k_0
) OR ((0x34 = let_k_0
) OR ((0x33 = let_k_0
) OR ((0x32 = let_k_0
) OR ((0x31 = let_k_0
) OR ((0x30 = let_k_0
) OR ((0x39 = let_k_0
) OR (0x38 = let_k_0
)
)
)
)
)
)
)
)
)
))  );
ASSERT( (LET let_k_0 = arg006[0x00000008] IN 
((0x37 = let_k_0
) OR ((0x36 = let_k_0
) OR ((0x35 = let_k_0
) OR ((0x34 = let_k_0
) OR ((0x33 = let_k_0
) OR ((0x32 = let_k_0
) OR ((0x31 = let_k_0
) OR ((0x30 = let_k_0
) OR ((0x39 = let_k_0
) OR (0x38 = let_k_0
)
)
)
)
)
)
)
)
)
))  );
ASSERT( (LET let_k_0 = arg006[0x00000009] IN 
((0x37 = let_k_0
) OR ((0x36 = let_k_0
) OR ((0x35 = let_k_0
) OR ((0x34 = let_k_0
) OR ((0x33 = let_k_0
) OR ((0x32 = let_k_0
) OR ((0x31 = let_k_0
) OR ((0x30 = let_k_0
) OR ((0x39 = let_k_0
) OR (0x38 = let_k_0
)
)
)
)
)
)
)
)
)
))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
,64)
)
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
,64)
)
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
,64)
)
,
let_k_4 = BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
,64)
)
 IN 
( NOT( (0x00000000 = (BVDIV(32, 
let_k_4[31:0], 
0x0000000A)
 | let_k_4[63:32]
)
))))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
,64)
)
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
,64)
)
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
,64)
)
,
let_k_4 = BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
,64)
)
 IN 
( NOT( (0x00000000 = (let_k_4[63:32] | BVDIV(32, 
BVDIV(32, 
let_k_4[31:0], 
0x0000000A)
, 
0x0000000A)

)
))))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
,64)
)
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
,64)
)
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
,64)
)
,
let_k_4 = BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
,64)
)
 IN 
( NOT( (0x00000000 = (let_k_4[63:32] | BVDIV(32, 
BVDIV(32, 
BVDIV(32, 
let_k_4[31:0], 
0x0000000A)
, 
0x0000000A)
, 
0x0000000A)

)
))))  );
ASSERT( (LET let_k_0 = BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
,64)
,
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
,64)
)
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
,64)
)
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
,64)
)
,
let_k_4 = BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
BVSX(BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
,64)
)
 IN 
( NOT( (0x00000000 = (let_k_4[63:32] | BVDIV(32, 
BVDIV(32, 
BVDIV(32, 
BVDIV(32, 
let_k_4[31:0], 
0x0000000A)
, 
0x0000000A)
, 
0x0000000A)
, 
0x0000000A)

)
))))  );
%----------------------------------------------------
QUERY( FALSE  );
